/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.veidemann.api.ExtractedText', null, global);
goog.exportSymbol('proto.veidemann.api.Screenshot', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.veidemann.api.ExtractedText = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.veidemann.api.ExtractedText, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.veidemann.api.ExtractedText.displayName = 'proto.veidemann.api.ExtractedText';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.veidemann.api.Screenshot = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.veidemann.api.Screenshot, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.veidemann.api.Screenshot.displayName = 'proto.veidemann.api.Screenshot';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.veidemann.api.ExtractedText.prototype.toObject = function(opt_includeInstance) {
  return proto.veidemann.api.ExtractedText.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.veidemann.api.ExtractedText} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.veidemann.api.ExtractedText.toObject = function(includeInstance, msg) {
  var obj = {
    warcId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    text: jspb.Message.getFieldWithDefault(msg, 2, ""),
    sentenceCount: jspb.Message.getFieldWithDefault(msg, 3, 0),
    wordCount: jspb.Message.getFieldWithDefault(msg, 4, 0),
    longWordCount: jspb.Message.getFieldWithDefault(msg, 5, 0),
    characterCount: jspb.Message.getFieldWithDefault(msg, 6, 0),
    lix: jspb.Message.getFieldWithDefault(msg, 7, 0),
    language: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.veidemann.api.ExtractedText}
 */
proto.veidemann.api.ExtractedText.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.veidemann.api.ExtractedText;
  return proto.veidemann.api.ExtractedText.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.veidemann.api.ExtractedText} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.veidemann.api.ExtractedText}
 */
proto.veidemann.api.ExtractedText.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setWarcId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSentenceCount(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setWordCount(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLongWordCount(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCharacterCount(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLix(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setLanguage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.veidemann.api.ExtractedText.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.veidemann.api.ExtractedText.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.veidemann.api.ExtractedText} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.veidemann.api.ExtractedText.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWarcId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSentenceCount();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getWordCount();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getLongWordCount();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getCharacterCount();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getLix();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getLanguage();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional string warc_id = 1;
 * @return {string}
 */
proto.veidemann.api.ExtractedText.prototype.getWarcId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.veidemann.api.ExtractedText.prototype.setWarcId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


Object.defineProperty(proto.veidemann.api.ExtractedText.prototype, "warcId", {
  set: function(value) {
    this.setWarcId(value);
  },
  get: function() {
    return this.getWarcId();
  },
});


/**
 * optional string text = 2;
 * @return {string}
 */
proto.veidemann.api.ExtractedText.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.veidemann.api.ExtractedText.prototype.setText = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


Object.defineProperty(proto.veidemann.api.ExtractedText.prototype, "text", {
  set: function(value) {
    this.setText(value);
  },
  get: function() {
    return this.getText();
  },
});


/**
 * optional int64 sentence_count = 3;
 * @return {number}
 */
proto.veidemann.api.ExtractedText.prototype.getSentenceCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.veidemann.api.ExtractedText.prototype.setSentenceCount = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


Object.defineProperty(proto.veidemann.api.ExtractedText.prototype, "sentenceCount", {
  set: function(value) {
    this.setSentenceCount(value);
  },
  get: function() {
    return this.getSentenceCount();
  },
});


/**
 * optional int64 word_count = 4;
 * @return {number}
 */
proto.veidemann.api.ExtractedText.prototype.getWordCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.veidemann.api.ExtractedText.prototype.setWordCount = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


Object.defineProperty(proto.veidemann.api.ExtractedText.prototype, "wordCount", {
  set: function(value) {
    this.setWordCount(value);
  },
  get: function() {
    return this.getWordCount();
  },
});


/**
 * optional int64 long_word_count = 5;
 * @return {number}
 */
proto.veidemann.api.ExtractedText.prototype.getLongWordCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.veidemann.api.ExtractedText.prototype.setLongWordCount = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


Object.defineProperty(proto.veidemann.api.ExtractedText.prototype, "longWordCount", {
  set: function(value) {
    this.setLongWordCount(value);
  },
  get: function() {
    return this.getLongWordCount();
  },
});


/**
 * optional int64 character_count = 6;
 * @return {number}
 */
proto.veidemann.api.ExtractedText.prototype.getCharacterCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.veidemann.api.ExtractedText.prototype.setCharacterCount = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


Object.defineProperty(proto.veidemann.api.ExtractedText.prototype, "characterCount", {
  set: function(value) {
    this.setCharacterCount(value);
  },
  get: function() {
    return this.getCharacterCount();
  },
});


/**
 * optional int64 lix = 7;
 * @return {number}
 */
proto.veidemann.api.ExtractedText.prototype.getLix = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.veidemann.api.ExtractedText.prototype.setLix = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


Object.defineProperty(proto.veidemann.api.ExtractedText.prototype, "lix", {
  set: function(value) {
    this.setLix(value);
  },
  get: function() {
    return this.getLix();
  },
});


/**
 * optional string language = 8;
 * @return {string}
 */
proto.veidemann.api.ExtractedText.prototype.getLanguage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.veidemann.api.ExtractedText.prototype.setLanguage = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


Object.defineProperty(proto.veidemann.api.ExtractedText.prototype, "language", {
  set: function(value) {
    this.setLanguage(value);
  },
  get: function() {
    return this.getLanguage();
  },
});





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.veidemann.api.Screenshot.prototype.toObject = function(opt_includeInstance) {
  return proto.veidemann.api.Screenshot.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.veidemann.api.Screenshot} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.veidemann.api.Screenshot.toObject = function(includeInstance, msg) {
  var obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    executionId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    uri: jspb.Message.getFieldWithDefault(msg, 3, ""),
    img: msg.getImg_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.veidemann.api.Screenshot}
 */
proto.veidemann.api.Screenshot.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.veidemann.api.Screenshot;
  return proto.veidemann.api.Screenshot.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.veidemann.api.Screenshot} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.veidemann.api.Screenshot}
 */
proto.veidemann.api.Screenshot.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setExecutionId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUri(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setImg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.veidemann.api.Screenshot.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.veidemann.api.Screenshot.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.veidemann.api.Screenshot} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.veidemann.api.Screenshot.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getExecutionId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUri();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getImg_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.veidemann.api.Screenshot.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.veidemann.api.Screenshot.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


Object.defineProperty(proto.veidemann.api.Screenshot.prototype, "id", {
  set: function(value) {
    this.setId(value);
  },
  get: function() {
    return this.getId();
  },
});


/**
 * optional string execution_id = 2;
 * @return {string}
 */
proto.veidemann.api.Screenshot.prototype.getExecutionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.veidemann.api.Screenshot.prototype.setExecutionId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


Object.defineProperty(proto.veidemann.api.Screenshot.prototype, "executionId", {
  set: function(value) {
    this.setExecutionId(value);
  },
  get: function() {
    return this.getExecutionId();
  },
});


/**
 * optional string uri = 3;
 * @return {string}
 */
proto.veidemann.api.Screenshot.prototype.getUri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.veidemann.api.Screenshot.prototype.setUri = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


Object.defineProperty(proto.veidemann.api.Screenshot.prototype, "uri", {
  set: function(value) {
    this.setUri(value);
  },
  get: function() {
    return this.getUri();
  },
});


/**
 * optional bytes img = 4;
 * @return {string}
 */
proto.veidemann.api.Screenshot.prototype.getImg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes img = 4;
 * This is a type-conversion wrapper around `getImg()`
 * @return {string}
 */
proto.veidemann.api.Screenshot.prototype.getImg_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getImg()));
};


/**
 * optional bytes img = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getImg()`
 * @return {!Uint8Array}
 */
proto.veidemann.api.Screenshot.prototype.getImg_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getImg()));
};


/** @param {!(string|Uint8Array)} value */
proto.veidemann.api.Screenshot.prototype.setImg = function(value) {
  jspb.Message.setProto3BytesField(this, 4, value);
};


Object.defineProperty(proto.veidemann.api.Screenshot.prototype, "img", {
  set: function(value) {
    this.setImg(value);
  },
  get: function() {
    return this.getImg();
  },
});


goog.object.extend(exports, proto.veidemann.api);
